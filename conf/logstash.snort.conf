input {
  beats {
    port => 5044
  }
}


filter {
  if [log_type] == "snort" {
    json {
      source => "message"
    }

    date {
      match => [ "timestamp", "MM/dd-HH:mm:ss.SSSSSS" ]
      target => "@timestamp"
      timezone => "UTC"
    }

    mutate {
      convert => {
        "pkt_num" => "integer"
        "pkt_len" => "integer"
        "src_port" => "integer"
        "dst_port" => "integer"
        "priority" => "integer"
      }
    }

    # Split rule field (1:31417:3) into components
    if [rule] {
      grok {
        match => { "rule" => "%{INT:rule_generator}:%{INT:rule_id}:%{INT:rule_revision}" }
      }
      mutate {
        convert => {
          "rule_generator" => "integer"
          "rule_id" => "integer"
          "rule_revision" => "integer"
        }
      }
    }
#    Left this because it alters index in elasticsearch
#    if [b64_data] {
#      ruby {
#        code => '
#          begin
#            require "base64"
#            decoded_data = Base64.decode64(event.get("b64_data"))
#            event.set("decoded_data", decoded_data)
#          rescue => e
#            event.tag("_base64_decode_failure")
#          end
#        '
#      }
#
#      if [decoded_data] {
#        kv {
#          source => "decoded_data"
#          field_split => "\n"
#          value_split => ": "
#          target => "http_headers"
#        }
#      }
#    }

    # Add metadata
    mutate {
      add_field => {
        "event_type" => "snort_alert"
        "sensor_name" => "%{[host][name]}"
      }
      remove_field => [ "message", "rule", "b64_data" ]
    }
  }
}


output {
    if [log_type] == "snort" {
        elasticsearch {
          ssl => true
          ssl_certificate_verification => true
	  # imported from elasticsearch server
          cacert => "/usr/share/elasticsearch/certs/http_ca.crt"
          hosts => ["https://10.0.0.108:9200"]
          index => "snort-alert-%{+YYYY.MM.dd}"
          user => "elastic"
          password => "fill_it"
        }
        stdout {
          codec => rubydebug
        }
    }
}
