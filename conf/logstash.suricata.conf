input {
  beats {
    port => 5044
  }
}

filter {
  if [log_type] == "suricata" {
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }

    if [event_type] == "alert" {
      mutate {
        add_field => {
          # Basic Alert Information
          "alert_severity" => "%{[alert][severity]}"
          "alert_category" => "%{[alert][category]}"
          "alert_signature" => "%{[alert][signature]}"
          "alert_action" => "%{[alert][action]}"

          # Alert Metadata
          "alert_gid" => "%{[alert][gid]}"
          "alert_signature_id" => "%{[alert][signature_id]}"
          "alert_rev" => "%{[alert][rev]}"
          "alert_metadata" => "%{[alert][metadata]}"

          # Classification Details
          "alert_class" => "%{[alert][classification]}"

          # Reference Information
          "alert_references" => "%{[alert][references]}"

          # Source and Target Information
          "src_ip" => "%{[src_ip]}"
          "src_port" => "%{[src_port]}"
          "dest_ip" => "%{[dest_ip]}"
          "dest_port" => "%{[dest_port]}"

          # Protocol Information
          "proto" => "%{[proto]}"

          # Application Layer
          "app_proto" => "%{[app_proto]}"

          # Packet Information
          "packet_size" => "%{[packet_size]}"
          "packet" => "%{[packet]}"

          # Payload Information
          "payload" => "%{[payload]}"
          "payload_printable" => "%{[payload_printable]}"

          # Stream Information
          "stream" => "%{[stream]}"

          # HTTP Specific (if available)
          "http_hostname" => "%{[http][hostname]}"
          "http_url" => "%{[http][url]}"
          "http_user_agent" => "%{[http][http_user_agent]}"
          "http_method" => "%{[http][http_method]}"
          "http_protocol" => "%{[http][protocol]}"

          # TLS Specific (if available)
          "tls_version" => "%{[tls][version]}"
          "tls_sni" => "%{[tls][sni]}"

          # SMTP Specific (if available)
          "smtp_helo" => "%{[smtp][helo]}"
          "smtp_mail_from" => "%{[smtp][mail_from]}"
          "smtp_rcpt_to" => "%{[smtp][rcpt_to]}"
        }
      }

      # Geolocate source IP
      geoip {
        source => "src_ip"
        target => "src_ip_geo"
        fields => ["city_name", "country_name", "country_code2", "location", "latitude", "longitude", "timezone", "continent_code", "region_name"]
        database => "/var/lib/logstash/geoip_database_management/1731928423/GeoLite2-City.mmdb"
      }

      # Geolocate destination IP
      geoip {
        source => "dest_ip"
        target => "dest_ip_geo"
        fields => ["city_name", "country_name", "country_code2", "location", "latitude", "longitude", "timezone", "continent_code", "region_name"]
        database => "/var/lib/logstash/geoip_database_management/1731928423/GeoLite2-City.mmdb"
      }

      # Convert numeric fields
      mutate {
        convert => {
          "[alert][severity]" => "integer"
          "[alert][gid]" => "integer"
          "[alert][signature_id]" => "integer"
          "[alert][rev]" => "integer"
          "src_port" => "integer"
          "dest_port" => "integer"
          "packet_size" => "integer"
          "flow_id" => "integer"
          "tx_id" => "integer"
        }
      }

      # Handle array fields
      if [alert][references] {
        ruby {
          code => "
            references = event.get('[alert][references]')
            if references.is_a?(Array)
              event.set('alert_references_str', references.join(', '))
            end
          "
        }
      }

      # Handle metadata array
      if [alert][metadata] {
        ruby {
          code => "
            metadata = event.get('[alert][metadata]')
            if metadata.is_a?(Array)
              event.set('alert_metadata_str', metadata.map { |m| m.to_s }.join(', '))
            end
          "
        }
      }
    }
  }
}

output {
    if [log_type] == "suricata" {
        elasticsearch {
          ssl => true
          ssl_certificate_verification => true
          cacert => "/usr/share/elasticsearch/certs/http_ca.crt"
          hosts => ["https://10.0.0.108:9200"]
          index => "suricata-alert-%{+YYYY.MM.dd}"
          user => "elastic"
          password => "fill_it"
        }
        stdout {
          codec => rubydebug
        }
    }
}
